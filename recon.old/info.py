#!/usr/bin/env python3
#
# info.py:
#
# Report about a file that is generated by this system

from collections import defaultdict
import re
import os
import os.path

import gurobipy as gu


def analyze_lp_file(lp_fname):
    vars = set()                # all of the variables that are seen
    vars_female_30 = set()
    v_re = re.compile(r"(C_\d[^ ]+[YN])")
    linenumber = 0
    constraints = 0
    vars = 0
    with open(lp_fname) as f:
        for line in f:
            linenumber += 1
            if linenumber==1 and line!='\\* DB Recon *\\ \n':
                print("{}: Not a valid LP file".format(lp_fname))
                return
            if len(line)<35:
                mode = line.strip()
                continue
            if mode=="Subject To":
                constraints += 1
                continue
            if mode=="Binaries":
                vars += 1

    if mode!='End':
        print("{}: File not properly terminated".format(lp_fname))
        return
    e = gu.Env.OtherEnv("gurobi.log", "Census", "DAS", 0, "")
    model = gu.read(lp_fname, env=e)
    model.printStats()
    print("Model Numvars:{}  numConstrs:{}".format(model.Numvars,model.numConstrs))
    print("{}  filesize: {:,}  total vars: {:,}  total constraints: {:,}".format(
        lp_fname,os.path.getsize(lp_fname),vars,constraints))
    print(dir(model))


def analyze_data_fields():
    p_re = re.compile(",(P\d+),")
    table_count = defaultdict(int)
    table_name  = dict()
    tables = []
    with open("DATA_FIELD_DESCRIPTORS_classified.csv") as f:
        for line in f:
            m = p_re.search(line)
            if m:
                table = m.group(1)
                if table not in table_name:
                    table_name[table] = line.split(",")[2] # this column has the table name
                    tables.append(table)
                table_count[table] += 1
    for table in tables:
        print("{:3} {:3} {:30}".format(table_count[table],table,table_name[table]))
            

def analyze_file(fname):
    if fname.endswith(".lp"):
        analyze_lp_file(fname)
        return

def info_gurobi():
    m = gu.read("/mnt/2010DATA/recon/al/01001/lp/model_01001020100.lp", gu.Env.OtherEnv("gurobi.log", "Census", "DAS", 0, ""))
    print(m.LicenseExpiration)
    print(m.ModelName,m.ModelSense, m.NumBinVars, m.NumConstrs, m.NumGenConstrs, m.NumIntVars, m.NumNZs, m.NumObj, m.NumPWLObjVars, m.NumQCNZs,
          m.NumQConstrs, m.NumQNZs, m.NumSOS, m.NumStart, m.NumVars)
    print(m.Server)
    print(m.SolCount)
    print(m.Status)
    help(m.printStats)
    exit(1)



if __name__=="__main__":
    from argparse import ArgumentParser,ArgumentDefaultsHelpFormatter
    parser = ArgumentParser( formatter_class = ArgumentDefaultsHelpFormatter,
                             description="Report about a file that was created as part of the database reconstruction project." )
    parser.add_argument("files", nargs="*")
    parser.add_argument("--gurobi", action='store_true')
    args = parser.parse_args()

    if args.gurobi:
        info_gurobi()

    for fname in args.files:
        analyze_file(fname)

    
